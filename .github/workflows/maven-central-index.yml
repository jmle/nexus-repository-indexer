name: Generate Maven Central Index

on:
  # Allow manual triggering only
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Maven repository URL'
        required: false
        default: 'https://repo1.maven.org/maven2'
      repository_id:
        description: 'Repository ID'
        required: false
        default: 'central'

jobs:
  generate-index:
    # Standard runner (available on free GitHub accounts)
    # Larger runners require GitHub Team/Enterprise:
    # - ubuntu-latest-4-cores (Team/Enterprise only)
    # - ubuntu-latest-8-cores (Team/Enterprise only)
    runs-on: ubuntu-latest  
    timeout-minutes: 480  # 8 hours timeout
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Check available disk space
      run: |
        echo "=== Initial Disk Space ==="
        df -h
        echo "=========================="
        
    - name: Create output directories
      run: |
        mkdir -p /tmp/maven-index-output
        mkdir -p /tmp/maven-index-cache
        
    - name: Set variables
      run: |
        REPO_URL="${{ github.event.inputs.repository_url || 'https://repo1.maven.org/maven2' }}"
        REPO_ID="${{ github.event.inputs.repository_id || 'central' }}"
        DATE=$(date +%Y-%m-%d)
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_ID=$REPO_ID" >> $GITHUB_ENV
        echo "DATE=$DATE" >> $GITHUB_ENV
        echo "OUTPUT_FILE=${REPO_ID}-${DATE}.archive-metadata.txt" >> $GITHUB_ENV
        echo "COMPRESSED_FILE=${REPO_ID}-${DATE}.archive-metadata.txt.gz" >> $GITHUB_ENV
        
    - name: Free up disk space
      run: |
        echo "=== Freeing up disk space ==="
        # Remove unnecessary packages
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        
        echo "=== Disk space after cleanup ==="
        df -h
        echo "=========================="
        
    - name: Generate Maven Central index
      run: |
        echo "Starting Maven Central index generation..."
        echo "Repository: $REPO_URL"
        echo "Output will be: $OUTPUT_FILE"
        
        echo "=== Disk space before generation ==="
        df -h
        
        mvn compile exec:java \
          -pl indexer \
          -Djava.util.concurrent.ForkJoinPool.common.parallelism=8 \
          -Dexec.mainClass="org.jboss.windup.maven.nexusindexer.GenerateMetadataFile" \
          -Dexec.args="TEXT $REPO_ID $REPO_URL /tmp/maven-index-output /tmp/maven-index-cache"
          
    - name: Clean up Maven cache
      run: |
        echo "=== Cleaning up Maven cache ==="
        rm -rf /tmp/maven-index-cache
        rm -rf ~/.m2/repository/org/apache/maven/indexer
        
        echo "=== Disk space after Maven cleanup ==="
        df -h
          
    - name: Check output file
      run: |
        OUTPUT_PATH="/tmp/maven-index-output/$OUTPUT_FILE"
        if [ -f "$OUTPUT_PATH" ]; then
          echo "‚úÖ Index file generated successfully!"
          echo "File size: $(du -h "$OUTPUT_PATH" | cut -f1)"
          echo "Line count: $(wc -l < "$OUTPUT_PATH")"
          echo "First 5 lines:"
          head -5 "$OUTPUT_PATH"
        else
          echo "‚ùå Output file not found: $OUTPUT_PATH"
          echo "Available files in output directory:"
          ls -la /tmp/maven-index-output/
          exit 1
        fi
        
    - name: Compress index file
      run: |
        echo "Compressing index file..."
        cd /tmp/maven-index-output
        
        echo "=== Disk space before compression ==="
        df -h
        
        gzip -9 "$OUTPUT_FILE"
        
        echo "‚úÖ Compression completed!"
        echo "Compressed file size: $(du -h "$COMPRESSED_FILE" | cut -f1)"
        
        echo "=== Disk space after compression ==="
        df -h
        
    - name: Generate release notes
      run: |
        cat > /tmp/release-notes.md << EOF
        # Maven Central Repository Index - $DATE
        
        This release contains the complete Maven Central repository index as a compressed text file.
        
        ## File Format
        Each line contains:
        \`\`\`
        <sha1-hash> <groupId>:<artifactId>:<packaging>:<classifier>:<version>
        \`\`\`
        
        ## Statistics
        - **Repository**: $REPO_URL
        - **Generated**: $DATE
        - **File size**: $(du -h "/tmp/maven-index-output/$COMPRESSED_FILE" | cut -f1)
        - **Artifacts**: $(zcat "/tmp/maven-index-output/$COMPRESSED_FILE" | wc -l) entries
        
        ## Usage
        \`\`\`bash
        # Download and extract
        wget https://github.com/${{ github.repository }}/releases/download/v$DATE/$COMPRESSED_FILE
        gunzip $COMPRESSED_FILE
        
        # Search for artifacts
        grep "org.springframework" $OUTPUT_FILE
        \`\`\`
        
        Generated automatically by GitHub Actions.
        EOF
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.DATE }}
        release_name: Maven Central Index ${{ env.DATE }}
        body_path: /tmp/release-notes.md
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/maven-index-output/${{ env.COMPRESSED_FILE }}
        asset_name: ${{ env.COMPRESSED_FILE }}
        asset_content_type: application/gzip
        
    - name: Clean up
      if: always()
      run: |
        echo "Cleaning up temporary files..."
        rm -rf /tmp/maven-index-output
        rm -rf /tmp/maven-index-cache
        rm -f /tmp/release-notes.md
        
    - name: Notify completion
      if: success()
      run: |
        echo "üéâ Maven Central index generation completed successfully!"
        echo "Release created: https://github.com/${{ github.repository }}/releases/tag/v${{ env.DATE }}"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Maven Central index generation failed!"
        echo "Check the logs above for details."
